{"openapi": "3.0.2", "info": {"title": "Contaxy API", "description": "Functionality to create and manage projects, services, jobs, and files.", "version": "0.0.23"}, "paths": {"/system/info": {"get": {"tags": ["system"], "summary": "Get system info.", "description": "Returns information about this instance.", "operationId": "get_system_info", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemInfo"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/system/health": {"get": {"tags": ["system"], "summary": "Check server health status.", "description": "Returns a successful return code if the instance is healthy.", "operationId": "check_health_system_health_get", "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/system/statistics": {"get": {"tags": ["system"], "summary": "Get system statistics.", "description": "Returns statistics about this instance.", "operationId": "get_system_statistics", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SystemStatistics"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/system/initialize": {"post": {"tags": ["system"], "summary": "Initialize the system.", "description": "Initializes the system.", "operationId": "initialize_system", "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/system/admin": {"post": {"tags": ["system"], "summary": "Register Admin User", "operationId": "register_admin_user_system_admin_post", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_register_admin_user_system_admin_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/system/allowed-images": {"get": {"tags": ["system"], "summary": "List all allowed images.", "operationId": "list_allowed_images", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Allowed Images", "type": "array", "items": {"$ref": "#/components/schemas/AllowedImageInfo"}}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["system"], "summary": "Add an image to the list of allowed images or replace one already on the list.", "operationId": "add_allowed_image", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AllowedImageInfo"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AllowedImageInfo"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["system"], "summary": "Remove an image from the list of allowed images.", "operationId": "delete_allowed_image", "parameters": [{"description": "Name of a docker image without the tag", "required": true, "schema": {"title": "Docker image name", "type": "string", "description": "Name of a docker image without the tag"}, "name": "image_name", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/login-page": {"get": {"tags": ["auth"], "summary": "Open the login page.", "description": "Returns or redirect to the login-page.", "operationId": "open_login_page", "responses": {"303": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/auth/login": {"get": {"tags": ["auth"], "summary": "Login a user session.", "description": "Signs in the user based on username and password credentials.\n\nThis will set http-only cookies containg tokens with full user access.", "operationId": "login_user_session", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_user_session"}}}, "required": true}, "responses": {"307": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/auth/logout": {"get": {"tags": ["auth"], "summary": "Logout a user session.", "description": "Removes all session token cookies and redirects to the login page.\n\nWhen making requests to the this endpoint, the browser should be redirected to this endpoint.", "operationId": "logout_user_session", "responses": {"307": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/tokens": {"get": {"tags": ["auth"], "summary": "List API tokens.", "description": "Returns list of created API tokens associated with the authenticated user.", "operationId": "list_api_tokens", "parameters": [{"description": "Subject for which the tokens should be listed.If it is not provided, the tokens of the authorized user are returned.", "required": false, "schema": {"title": "Token Subject", "type": "string", "description": "Subject for which the tokens should be listed.If it is not provided, the tokens of the authorized user are returned."}, "name": "token_subject", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Api Tokens", "type": "array", "items": {"$ref": "#/components/schemas/ApiToken"}}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["auth"], "summary": "Create API or session token.", "description": "Returns a session or API token with the specified scopes.\n\nIf no scopes are specified, the token will be generated with the same scopes as the authorized token.\n\nThe API token can be deleted (revoked) at any time.\nIn comparison, the session token cannot be revoked but expires after a short time (a few minutes).\n\nThis operation can only be called with API tokens (or refresh tokens) due to security aspects.\nSession tokens are not allowed to create other tokens.\nFurthermore, tokens can only be created if the API token used for authorization is granted at least\nthe same access level on the given resource. For example, a token with `write` access level on a given resource\nallows to create new tokens with `write` or `read` granted level on that resource.", "operationId": "create_token", "parameters": [{"description": "Scopes requested for this token. If none specified, the token will be generated with same set of scopes as the authorized token.", "required": false, "schema": {"title": "Scopes", "type": "array", "items": {"type": "string"}, "description": "Scopes requested for this token. If none specified, the token will be generated with same set of scopes as the authorized token."}, "name": "scope", "in": "query"}, {"description": "Type of the token.", "required": false, "schema": {"type": "string", "allOf": [{"$ref": "#/components/schemas/TokenType"}], "description": "Type of the token.", "default": "session-token"}, "name": "token_type", "in": "query"}, {"description": "Attach a short description to the generated token.", "required": false, "schema": {"title": "Description", "type": "string", "description": "Attach a short description to the generated token."}, "name": "description", "in": "query"}, {"description": "Purpose of this token.", "required": false, "schema": {"title": "Token Purpose", "type": "string", "description": "Purpose of this token.", "default": "custom-token-purpose"}, "name": "token_purpose", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Create Token", "type": "string"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/permissions": {"get": {"tags": ["auth"], "summary": "Lists permissions for given resource.", "description": "Lists the permissions for a given resource, admin access for that resource is required.", "operationId": "list_resource_permissions", "parameters": [{"required": true, "schema": {"title": "Resource Name", "type": "string"}, "name": "resource_name", "in": "query"}, {"required": false, "schema": {"title": "Resolve Roles", "type": "boolean", "default": true}, "name": "resolve_roles", "in": "query"}, {"required": false, "schema": {"title": "Use Cache", "type": "boolean", "default": true}, "name": "use_cache", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Resource Permissions", "type": "array", "items": {"type": "string"}}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["auth"], "summary": "Add permission to specified resource.", "description": "Adds permission to specified resource, admin access to the /auth/permissions resource is required.", "operationId": "set_resource_permissions", "parameters": [{"required": true, "schema": {"title": "Resource Name", "type": "string"}, "name": "resource_name", "in": "query"}, {"required": true, "schema": {"title": "Permission", "type": "string"}, "name": "permission", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["auth"], "summary": "Deletes permission of specified resource.", "description": "Deletes permission of specified resource, admin access to the /auth/permissions resource is required.", "operationId": "delete_resource_permissions", "parameters": [{"required": true, "schema": {"title": "Resource Name", "type": "string"}, "name": "resource_name", "in": "query"}, {"required": true, "schema": {"title": "Permission", "type": "string"}, "name": "permission", "in": "query"}, {"required": false, "schema": {"title": "Remove Sub Permissions", "type": "boolean", "default": false}, "name": "remove_sub_permissions", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/resources": {"get": {"tags": ["auth"], "summary": "List all resources that have a certain permission.", "description": "List all resources that have a certain permission, admin access to the /auth/resources resource is required.", "operationId": "get_resources_with_permission", "parameters": [{"required": true, "schema": {"title": "Permission", "type": "string"}, "name": "permission", "in": "query"}, {"required": false, "schema": {"title": "Resource Name Prefix", "type": "string"}, "name": "resource_name_prefix", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Resources With Permission", "type": "array", "items": {"type": "string"}}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/tokens/verify": {"post": {"tags": ["auth"], "summary": "Verify a Session or API Token.", "description": "Verifies a session or API token for its validity and - if provided - if it has the specified permission.\n\nReturns an successful HTTP Status code if verification was successful, otherwise an error is returned.", "operationId": "verify_access", "parameters": [{"description": "The token is checked if it is granted this permission. If none specified, only the existence or validity of the token itself is checked.", "required": false, "schema": {"title": "Resource Type ", "type": "string", "description": "The token is checked if it is granted this permission. If none specified, only the existence or validity of the token itself is checked."}, "name": "permission", "in": "query"}, {"description": "If false, no cache will be used for verifying the token.", "required": false, "schema": {"title": "Use Cache", "type": "boolean", "description": "If false, no cache will be used for verifying the token.", "default": true}, "name": "use_cache", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Token", "type": "string", "description": "Token to verify."}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizedAccess"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/auth/oauth/token": {"post": {"tags": ["auth"], "summary": "Request a token (OAuth2 Endpoint).", "description": "Returns an access tokens, ID tokens, or refresh tokens depending on the request parameters.\n\n The token endpoint is used by the client to obtain an access token by\n presenting its authorization grant or refresh token.\n\n The token endpoint supports the following grant types:\n - [Password Grant](https://tools.ietf.org/html/rfc6749#section-4.3.2): Used when the application exchanges the user\u2019s username and password for an access token.\n     - `grant_type` must be set to `password`\n     - `username` (required): The user\u2019s username.\n     - `password` (required): The user\u2019s password.\n     - `scope` (optional): Optional requested scope values for the access token.\n - [Refresh Token Grant](https://tools.ietf.org/html/rfc6749#section-6): Allows to use refresh tokens to obtain new access tokens.\n     - `grant_type` must be set to `refresh_token`\n     - `refresh_token` (required): The refresh token previously issued to the client.\n     - `scope` (optional): Requested scope values for the new access token. Must not include any scope values not originally granted by the resource owner, and if omitted is treated as equal to the originally granted scope.\n - [Client Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.4.2): Request an access token using only its client\ncredentials.\n     - `grant_type` must be set to `client_credentials`\n     - `scope` (optional): Optional requested scope values for the access token.\n     - Client Authentication required (e.g. via client_id and client_secret or auth header)\n - [Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1): Used to obtain both access tokens and refresh tokens based on an authorization code from the `/authorize` endpoint.\n     - `grant_type` must be set to `authorization_code`\n     - `code` (required): The authorization code that the client previously received from the authorization server.\n     - `redirect_uri` (required): The redirect_uri parameter included in the original authorization request.\n     - Client Authentication required (e.g. via client_id and client_secret or auth header)\n\nFor password, client credentials, and refresh token flows, calling this endpoint is the only step of the flow.\nFor the authorization code flow, calling this endpoint is the second step of the flow.\n\nThis endpoint implements the [OAuth2 Token Endpoint](https://tools.ietf.org/html/rfc6749#section-3.2).", "operationId": "request_token", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_request_token"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OAuthToken"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OAuth2ErrorDetails"}}}}}}}, "/auth/oauth/revoke": {"post": {"tags": ["auth"], "summary": "Revoke a token (OAuth2 Endpoint).", "description": "Revokes a given token.\n\nThis will delete the API token, preventing further requests with the given token.\nBecause of caching, the API token might still be usable under certain conditions\nfor some operations for a maximum of 15 minutes after deletion.\n\nThis endpoint implements the OAuth2 Revocation Flow ([RFC7009](https://tools.ietf.org/html/rfc7009)).", "operationId": "revoke_token", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_revoke_token"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OAuth2ErrorDetails"}}}}}}}, "/auth/oauth/introspect": {"post": {"tags": ["auth"], "summary": "Introspect a token (OAuth2 Endpoint).", "description": "Introspects a given token.\n\nReturns a boolean that indicates whether it is active or not.\nIf the token is active, additional data about the token is also returned.\nIf the token is invalid, expired, or revoked, it is considered inactive.\n\nThis endpoint implements the [OAuth2 Introspection Flow](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/) ([RFC7662](https://tools.ietf.org/html/rfc7662)).", "operationId": "introspect_token", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_introspect_token"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OAuthTokenIntrospection"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/auth/oauth/callback": {"get": {"tags": ["auth"], "summary": "Open the login page (OAuth2 Client Endpoint).", "description": "Callback to finish the login process (OAuth2 Client Endpoint).\n\nThe authorization `code` is exchanged for an access and ID token.\nThe ID token contains all relevant user information and is used to login the user.\nIf the user does not exist, a new user will be created with the information from the ID token.\n\nFinally, the user is redirected to the webapp and a session/refresh token is set in the cookies.\n\nThis endpoint implements the [Authorization Response](https://tools.ietf.org/html/rfc6749#section-4.1.2) from RFC6749.", "operationId": "login_callback", "parameters": [{"description": "The authorization code generated by the authorization server.", "required": true, "schema": {"title": "Code", "type": "string", "description": "The authorization code generated by the authorization server."}, "name": "code", "in": "query"}, {"required": false, "schema": {"title": "State", "type": "string"}, "name": "state", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/auth/oauth/enabled": {"get": {"tags": ["auth"], "summary": "Check if external OAuth2 (OIDC) IDP is enabled.", "description": "Returns the value of `OIDC_AUTH_ENABLED`.\n\nReturns \"0\" if it is not set, \"1\" if it is set.", "operationId": "oauth_enabled", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Oauth Enabled", "type": "string"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}}}, "/users": {"get": {"tags": ["users", "users"], "summary": "List all users.", "description": "Lists all users that are visible to the authenticated user.", "operationId": "list_users", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Users", "type": "array", "items": {"anyOf": [{"$ref": "#/components/schemas/User"}, {"$ref": "#/components/schemas/UserRead"}]}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["users", "users"], "summary": "Create a user.", "description": "Creates a user. For the user also a technical project is created.\n\nIf the `password` is not provided, the user can only login by using other methods (social login).", "operationId": "create_user", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRegistration"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/users/me": {"get": {"tags": ["users", "users"], "summary": "Get my user metadata.", "description": "Returns the user metadata from the authenticated user.", "operationId": "get_my_user", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/users/{user_id}": {"get": {"tags": ["users", "users"], "summary": "Get user metadata.", "description": "Returns the user metadata for a single user.", "operationId": "get_user", "parameters": [{"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["users", "users"], "summary": "Delete a user.", "description": "Deletes a user and all resources which are only accesible by this user.\n\nShared project resources will not be deleted.", "operationId": "delete_user", "parameters": [{"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["users", "users"], "summary": "Update user metadata.", "description": "Updates the user metadata.\n\nThis will update only the properties that are explicitly set in the patch request.\nThe patching is based on the JSON Merge Patch Standard [RFC7396](https://tools.ietf.org/html/rfc7396).", "operationId": "update_user", "parameters": [{"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "Resource update failed.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/users/{user_id}:change-password": {"put": {"tags": ["users", "users"], "summary": "Change the user password", "description": "Changes the password of a given user.\n\nThe password can be changed by the given user or a system admin.\n\nThe password is stored as a hash.", "operationId": "change_password", "parameters": [{"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Password", "type": "string"}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/users/{user_id}/token": {"get": {"tags": ["users", "users"], "summary": "Get a user token.", "description": "Returns an API token with permission to access all resources accessible by the given user.\n\nThe `read` access level allows read-only access on all resources.\nThe `write` access level allows to create and delete user resources.\nThe `admin` access level allows additional user actions such as deletion of the user itself.", "operationId": "get_user_token", "parameters": [{"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}, {"description": "Access level of the token.", "required": false, "schema": {"type": "string", "allOf": [{"$ref": "#/components/schemas/AccessLevel"}], "description": "Access level of the token.", "default": "write"}, "name": "access_level", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get User Token", "type": "string"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects": {"get": {"tags": ["projects"], "summary": "List all projects.", "description": "Lists all projects visible to the authenticated user.\n\nA project is visible to a user, if the user has the at least a `read` permission for the project.\nSystem administrators will also see technical projects, such as `system-internal` and `system-global`.", "operationId": "list_projects", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Projects", "type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["projects"], "summary": "Create a new project.", "description": "Creates a new project.\n\nWe suggest to use the `suggest_project_id` endpoint to get a valid and available ID.\nThe project ID might also be set manually, however, an error will be returned if it does not comply with the ID requirements or is already used.", "operationId": "create_project", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectCreation"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}": {"get": {"tags": ["projects"], "summary": "Get details for a project.", "description": "Returns the metadata of a single project.", "operationId": "get_project", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["projects"], "summary": "Delete a project.", "description": "Deletes a project and all its associated resources including deployments and files.\n\nA project can only be delete by a user with `admin` permission on the project.", "operationId": "delete_project", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["projects"], "summary": "Update project metadata.", "description": "Updates the metadata of the given project.\n\nThis will update only the properties that are explicitly set in the patch request.\nThe patching is based on the JSON Merge Patch Standard [RFC7396](https://tools.ietf.org/html/rfc7396).", "operationId": "update_project", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects:suggest-id": {"get": {"tags": ["projects"], "summary": "Suggest project ID.", "description": "Suggests a valid and unique project ID for the given display name.\n\nThe project ID will be human-readable and resemble the provided display name,\nbut might be cut off or have an attached counter prefix.", "operationId": "suggest_project_id", "parameters": [{"required": true, "schema": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string"}, "name": "display_name", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Suggest Project Id", "type": "string"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/users": {"get": {"tags": ["projects"], "summary": "List project members.", "description": "Lists all project members.\n\nThis include all users that have atlease a `read` permission on the given project.", "operationId": "list_project_members", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Project Members", "type": "array", "items": {"$ref": "#/components/schemas/UserPermission"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/users/{user_id}": {"put": {"tags": ["projects"], "summary": "Add user to project.", "description": "Adds a user to the project.\n\nThis will add the permission for this project to the user item.\nThe `access_level` defines what the user can do:\n\n- The `read` permission level allows read-only access on all resources.\n- The `write` permission level allows to create and delete project resources.\n- The `admin` permission level allows to delete the project or add/remove other users.", "operationId": "add_project_member", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}, {"description": "The permission level.", "required": false, "schema": {"type": "string", "allOf": [{"$ref": "#/components/schemas/AccessLevel"}], "description": "The permission level.", "default": "write"}, "name": "access_level", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Add Project Member", "type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["projects"], "summary": "Remove user from project.", "description": "Removes a user from a project.\n\nThis will remove the permission for this project from the user item.", "operationId": "remove_project_member", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid user ID.", "required": true, "schema": {"title": "User ID", "type": "string", "description": "A valid user ID."}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Remove Project Member", "type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/token": {"get": {"tags": ["projects", "projects"], "summary": "Get project token.", "description": "Returns an API token with permission (`read`, `write`, or `admin`) to access all project resources.\n\nThe `read` access level allows read-only access on all resources.\nThe `write` access level allows to create and delete project resources.\nThe `admin` access level allows to delete the project or add/remove other users.", "operationId": "get_project_token", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Access level of the token.", "required": false, "schema": {"type": "string", "allOf": [{"$ref": "#/components/schemas/AccessLevel"}], "description": "Access level of the token.", "default": "write"}, "name": "access_level", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Project Token", "type": "string"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs": {"get": {"tags": ["jobs"], "summary": "List project jobs.", "description": "Lists all jobs associated with the given project.", "operationId": "list_jobs", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Jobs", "type": "array", "items": {"$ref": "#/components/schemas/Job"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["jobs"], "summary": "Deploy a job.", "description": "Deploy a job for the specified project.\n\nIf no `action_id` is provided, the system will automatically select the best deployment option.\n\nAvailable actions can be requested via the [list_deploy_job_actions](#jobs/list_deploy_job_actions) operation.\nIf the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.\n\nThe action mechanism is further explained in the description of the [list_deploy_job_actions](#jobs/list_deploy_job_actions).", "operationId": "deploy_job", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "The action ID from the job deploy options.", "required": false, "schema": {"title": "Action Id", "pattern": "^(?!.*--)[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$", "type": "string", "description": "The action ID from the job deploy options."}, "name": "action_id", "in": "query"}, {"description": "If true, the server waits for the job to be ready before sending a response.", "required": false, "schema": {"title": "Wait", "type": "boolean", "description": "If true, the server waits for the job to be ready before sending a response.", "default": false}, "name": "wait", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "307": {"description": "Redirecting to another URL"}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["jobs"], "summary": "Delete all jobs.", "description": "Deletes all jobs associated with a project.", "operationId": "delete_jobs", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "The start date to delete the jobs. If not specified, all jobs will be deleted.", "required": false, "schema": {"title": "Date From", "type": "string", "description": "The start date to delete the jobs. If not specified, all jobs will be deleted.", "format": "date-time"}, "name": "date_from", "in": "query"}, {"description": "The end date to delete the jobs. If not specified, all jobs will be deleted.", "required": false, "schema": {"title": "Date To", "type": "string", "description": "The end date to delete the jobs. If not specified, all jobs will be deleted.", "format": "date-time"}, "name": "date_to", "in": "query"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs/{job_id}": {"get": {"tags": ["jobs"], "summary": "Get job metadata.", "description": "Returns the metadata of a single job.\n\nThe returned metadata might be filtered based on the permission level of the authenticated user.", "operationId": "get_job_metadata", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid job ID.", "required": true, "schema": {"title": "Job ID", "type": "string", "description": "A valid job ID."}, "name": "job_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["jobs"], "summary": "Delete a job.", "description": "Deletes a job.\n\nThis will kill and remove the container and all associated deployment artifacts.", "operationId": "delete_job", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid job ID.", "required": true, "schema": {"title": "Job ID", "type": "string", "description": "A valid job ID."}, "name": "job_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs:suggest-config": {"get": {"tags": ["jobs"], "summary": "Suggest job configuration.", "description": "Suggests an input configuration based on the provided `container_image`.\n\nThe suggestion is based on metadata extracted from the container image (e.g. labels)\nas well as suggestions based on previous project deployments with the same image.", "operationId": "suggest_job_config", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Container image to use for suggestion.", "required": true, "schema": {"title": "Container Image", "type": "string", "description": "Container image to use for suggestion."}, "name": "container_image", "in": "query"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobInput"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs:deploy-actions": {"post": {"tags": ["jobs"], "summary": "List deploy job actions.", "description": "Lists all available job deployment options (actions).\n\nThe returned action IDs should be used when calling the [deploy_job](#job/deploy_job) operation.\n\nThe action mechanism allows extensions to provide additional deployment options for a job based on the provided configuration. It works the following way:\n\n1. The user requests all available deployment options via the [list_deploy_job_actions](#jobs/list_deploy_job_actions) operation.\n2. The operation will be forwarded to all installed extensions that have implemented the [list_deploy_job_actions](#jobs/list_deploy_job_actions) operation.\n3. Extensions can run arbitrary code based on the provided job configuration and return a list of actions with self-defined action IDs.\n4. The user selects one of those actions and triggers the [deploy_job](#jobs/deploy_job) operation by providing the selected action ID. The `action_id` from an extension contains the extension ID.\n5. The operation is forwarded to the selected extension, which can run arbitrary code to deploy the job based on the provided configuration.\n6. The return value of the operation should be a `Job` object.\n\nThe same action mechanism is also used for other type of actions on resources.", "operationId": "list_deploy_job_actions", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Deploy Job Actions", "type": "array", "items": {"$ref": "#/components/schemas/ResourceAction"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs/{job_id}/logs": {"get": {"tags": ["jobs"], "summary": "Get job logs.", "description": "Returns the stdout/stderr logs of the job.", "operationId": "get_job_logs", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid job ID.", "required": true, "schema": {"title": "Job ID", "type": "string", "description": "A valid job ID."}, "name": "job_id", "in": "path"}, {"description": "Only show the last n lines.", "required": false, "schema": {"title": "Lines", "type": "integer", "description": "Only show the last n lines."}, "name": "lines", "in": "query"}, {"description": "Only show the logs generated after a given date.", "required": false, "schema": {"title": "Since", "type": "string", "description": "Only show the logs generated after a given date.", "format": "date-time"}, "name": "since", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Job Logs", "type": "string"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs/{job_id}/actions": {"get": {"tags": ["jobs"], "summary": "List job actions.", "description": "Lists all actions available for the specified job.\n\nThe returned action IDs should be used when calling the [execute_job_action](#jobs/execute_job_action) operation.\n\nThe action mechanism allows extensions to provide additional functionality on jobs. It works the following way:\n\n1. The user requests all available actions via the [list_job_actions](#jobs/list_job_actions) operation.\n2. The operation will be forwarded to all installed extensions that have implemented the [list_job_actions](#jobs/list_job_actions) operation.\n3. Extensions can run arbitrary code - e.g., request and check the job metadata for compatibility - and return a list of actions with self-defined action IDs.\n4. The user selects one of those actions and triggers the [execute_job_action](#jobs/execute_job_action) operation by providing the selected action ID. The `action_id` from an extension contains the extension ID.\n5. The operation is forwarded to the selected extension, which can run arbitrary code to execute the selected action.\n6. The return value of the operation can be either a simple message (shown to the user) or a redirect to another URL (e.g., to show a web UI).\n\nThe same action mechanism is also used for other resources (e.g., files, services).\nIt can support a very broad set of use-cases, for example: Access to dashboards for monitoring, adminsitration tools, and more...", "operationId": "list_job_actions", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid job ID.", "required": true, "schema": {"title": "Job ID", "type": "string", "description": "A valid job ID."}, "name": "job_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Job Actions", "type": "array", "items": {"$ref": "#/components/schemas/ResourceAction"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/jobs/{job_id}/actions/{action_id}": {"post": {"tags": ["jobs"], "summary": "Execute a job action.", "description": "Executes the selected job action.\n\nThe actions need to be first requested from the [list_job_actions](#jobs/list_job_actions) operation.\nIf the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.\n\nThe action mechanism is further explained in the description of the [list_job_actions](#jobs/list_job_actions).", "operationId": "execute_job_action", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid job ID.", "required": true, "schema": {"title": "Job ID", "type": "string", "description": "A valid job ID."}, "name": "job_id", "in": "path"}, {"description": "The action ID from the list_job_actions operation.", "required": true, "schema": {"title": "Action Id", "pattern": "^(?!.*--)[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$", "type": "string", "description": "The action ID from the list_job_actions operation."}, "name": "action_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceActionExecution"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "307": {"description": "Redirecting to another URL"}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services": {"get": {"tags": ["services"], "summary": "List project services.", "description": "Lists all services associated with the given project.", "operationId": "list_services", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Services", "type": "array", "items": {"$ref": "#/components/schemas/Service"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["services"], "summary": "Deploy a service.", "description": "Deploy a service for the specified project.\n\nIf no `action_id` is provided, the system will automatically select the best deployment option.\n\nAvailable deployment options (actions) can be requested via the [list_deploy_service_actions](#services/list_deploy_service_actions) operation.\nIf the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.\n\nThe action mechanism is further explained in the description of the [list_deploy_service_actions](#services/list_deploy_service_actions).", "operationId": "deploy_service", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "The action ID from the service deploy options.", "required": false, "schema": {"title": "Action Id", "pattern": "^(?!.*--)[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$", "type": "string", "description": "The action ID from the service deploy options."}, "name": "action_id", "in": "query"}, {"description": "If true, the server waits for the service to be ready before sending a response.", "required": false, "schema": {"title": "Wait", "type": "boolean", "description": "If true, the server waits for the service to be ready before sending a response.", "default": false}, "name": "wait", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["services"], "summary": "Delete all services.", "description": "Deletes all services associated with a project.", "operationId": "delete_services", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services:suggest-config": {"get": {"tags": ["services"], "summary": "Suggest service configuration.", "description": "Suggests an input configuration based on the provided `container_image`.\n\nThe suggestion is based on metadata extracted from the container image (e.g. labels)\nas well as suggestions based on previous project deployments with the same image.", "operationId": "suggest_service_config", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Container image to use for suggestion.", "required": true, "schema": {"title": "Container Image", "type": "string", "description": "Container image to use for suggestion."}, "name": "container_image", "in": "query"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceInput"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services/{service_id}": {"get": {"tags": ["services"], "summary": "Get service metadata.", "description": "Returns the metadata of a single service.\n\nThe returned metadata might be filtered based on the permission level of the authenticated user.", "operationId": "get_service_metadata", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["services"], "summary": "Delete a service.", "description": "Deletes a service.\n\nThis will kill and remove the container and all associated deployment artifacts.", "operationId": "delete_service", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}, {"description": "Delete all volumes associated with the deployment.", "required": false, "schema": {"title": "Delete Volumes", "type": "boolean", "description": "Delete all volumes associated with the deployment.", "default": false}, "name": "delete_volumes", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["services"], "summary": "Update a service.", "description": "Updates a service.\n\nThis might force a recreation of the underlying container.", "operationId": "update_service", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Service"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "Resource update failed.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services:deploy-actions": {"post": {"tags": ["services"], "summary": "List deploy service actions.", "description": "Lists all available service deployment options (actions).\n\nThe returned action IDs should be used when calling the [deploy_service](#services/deploy_service) operation.\n\nThe action mechanism allows extensions to provide additional deployment options for a service based on the provided configuration. It works the following way:\n\n1. The user requests all available deployment options via the [list_deploy_service_actions](#services/list_deploy_service_actions) operation.\n2. The operation will be forwarded to all installed extensions that have implemented the [list_deploy_service_actions](#services/list_deploy_service_actions) operation.\n3. Extensions can run arbitrary code based on the provided service configuration and return a list of actions with self-defined action IDs.\n4. The user selects one of those actions and triggers the [deploy_service](#services/deploy_service) operation by providing the selected action ID. The `action_id` from an extension contains the extension ID.\n5. The operation is forwarded to the selected extension, which can run arbitrary code to deploy the service based on the provided configuration.\n6. The return value of the operation should be a `Service` object.\n\nThe same action mechanism is also used for other type of actions on resources.", "operationId": "list_deploy_service_actions", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Deploy Service Actions", "type": "array", "items": {"$ref": "#/components/schemas/ResourceAction"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services/{service_id}:update-service-access": {"post": {"tags": ["services"], "summary": "Update a service.", "description": "Update the last access information of the service to the current time and calling user.", "operationId": "update_service_access", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "Resource update failed.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services/{service_id}/logs": {"get": {"tags": ["services"], "summary": "Get service logs.", "description": "Returns the stdout/stderr logs of the service.", "operationId": "get_service_logs", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}, {"description": "Only show the last n lines.", "required": false, "schema": {"title": "Lines", "type": "integer", "description": "Only show the last n lines."}, "name": "lines", "in": "query"}, {"description": "Only show the logs generated after a given date.", "required": false, "schema": {"title": "Since", "type": "string", "description": "Only show the logs generated after a given date.", "format": "date-time"}, "name": "since", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Service Logs", "type": "string"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services/{service_id}/actions": {"get": {"tags": ["services"], "summary": "List service actions.", "description": "Lists all actions available for the specified service.\n\nThe returned action IDs should be used when calling the [execute_service_action](#services/execute_service_action) operation.\n\nThe action mechanism allows extensions to provide additional functionality on services. It works the following way:\n\n1. The user requests all available actions via the [list_service_actions](#services/list_service_actions) operation.\n2. The operation will be forwarded to all installed extensions that have implemented the [list_service_actions](#services/list_service_actions) operation.\n3. Extensions can run arbitrary code - e.g., request and check the service metadata for compatibility - and return a list of actions with self-defined action IDs.\n4. The user selects one of those actions and triggers the [execute_service_action](#services/execute_service_action) operation by providing the selected action ID.  The `action_id` from an extension contains the extension ID.\n5. The operation is forwarded to the selected extension, which can run arbitrary code to execute the selected action.\n6. The return value of the operation can be either a simple message (shown to the user) or a redirect to another URL (e.g., to show a web UI).\n\nThe same action mechanism is also used for other resources (e.g., files, jobs).\nIt can support a very broad set of use-cases, for example: Access to service endpoints, dashboards for monitoring, administration tools, and more...", "operationId": "list_service_actions", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Service Actions", "type": "array", "items": {"$ref": "#/components/schemas/ResourceAction"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services/{service_id}/actions/{action_id}": {"post": {"tags": ["services"], "summary": "Execute a service action.", "description": "Executes the selected service action.\n\nThe actions need to be first requested from the [list_service_actions](#services/list_service_actions) operation.\nIf the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.\n\nThe action mechanism is further explained in the description of the [list_service_actions](#services/list_service_actions).", "operationId": "execute_service_action", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}, {"description": "The action ID from the list_service_actions operation.", "required": true, "schema": {"title": "Action Id", "pattern": "^(?!.*--)[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$", "type": "string", "description": "The action ID from the list_service_actions operation."}, "name": "action_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResourceActionExecution"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "307": {"description": "Redirecting to another URL"}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/services/{service_id}/token": {"get": {"tags": ["services", "services"], "summary": "Get service access token.", "description": "Returns an API token with permission to access the service endpoints.\n\nThis token is read-only (permission level read) and does not allow any other permission such as deleting or updating the service.\nThe token can be deleted (revoked) at any time.", "operationId": "get_service_access_token", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid Service ID.", "required": true, "schema": {"title": "Service ID", "type": "string", "description": "A valid Service ID."}, "name": "service_id", "in": "path"}, {"description": "If specified, the token only allows access to this endpoint.", "required": false, "schema": {"title": "Endpoint", "type": "string", "description": "If specified, the token only allows access to this endpoint."}, "name": "endpoint", "in": "query"}, {"description": "Attach a short description to the generated token.", "required": false, "schema": {"title": "Description", "type": "string", "description": "Attach a short description to the generated token."}, "name": "description", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Service Access Token", "type": "string"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/extensions": {"get": {"tags": ["extensions"], "summary": "List extensions.", "description": "Returns all installed extensions accesible by the specified project.\n\nThis also includes all extensions which are installed globally as well as\nextensions installed by the authorized user.", "operationId": "list_extensions", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Extensions", "type": "array", "items": {"$ref": "#/components/schemas/Extension"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "post": {"tags": ["extensions"], "summary": "Install extension.", "description": "Installs an extension for the given project.\n\nThis will deploy the extension container for the selected project and\nregisters the extension for all the specified capabilities.", "operationId": "install_extension", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExtensionInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Extension"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/extensions/{extension_id}": {"get": {"tags": ["extensions"], "summary": "Get extension metadata.", "description": "Returns the metadata of the given extension.", "operationId": "get_extension_metadata", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid extension ID.", "required": true, "schema": {"title": "Extension ID", "type": "string", "description": "A valid extension ID."}, "name": "extension_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Extension"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["extensions"], "summary": "Delete extension.", "description": "Deletes an extension.\n\nThis will delete the installation metadata as well as the service container.", "operationId": "delete_extension", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid extension ID.", "required": true, "schema": {"title": "Extension ID", "type": "string", "description": "A valid extension ID."}, "name": "extension_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/extensions:suggest-config": {"get": {"tags": ["extensions"], "summary": "Suggest extension configuration.", "description": "Suggests an input configuration based on the provided `container_image`.\n\nThe suggestion is based on metadata extracted from the container image (e.g. labels)\nas well as suggestions based on previous project deployments with the same image.", "operationId": "suggest_extension_config", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Container image to use for suggestion.", "required": true, "schema": {"title": "Container Image", "type": "string", "description": "Container image to use for suggestion."}, "name": "container_image", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExtensionInput"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/files": {"get": {"tags": ["files"], "summary": "List project files.", "description": "Lists all available files for the project.\n\nThe files can be filtered by using a `prefix`. The prefix is applied on the full path (directory path + filename).\n\nAll versions of the files can be included by setting `versions` to `true` (default is `false`).\n\nSet `recursive` to `false` to only show files and folders (prefixes) of the current folder.\nThe current folder is either the root folder (`/`) or the folder selected by the `prefix` parameter (has to end with `/`).", "operationId": "list_files", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "Include all content of subfolders.", "required": false, "schema": {"title": "Recursive", "type": "boolean", "description": "Include all content of subfolders.", "default": true}, "name": "recursive", "in": "query"}, {"description": "Include all versions of all files.", "required": false, "schema": {"title": "Include Versions", "type": "boolean", "description": "Include all versions of all files.", "default": false}, "name": "include_versions", "in": "query"}, {"description": "Filter results to include only files whose names begin with this prefix.", "required": false, "schema": {"title": "Prefix", "type": "string", "description": "Filter results to include only files whose names begin with this prefix."}, "name": "prefix", "in": "query"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Files", "type": "array", "items": {"$ref": "#/components/schemas/File"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["files"], "summary": "Delete all files.", "description": "Deletes all files associated with a project.", "operationId": "delete_files", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "The start date to delete the files. If not specified, all files will be deleted.", "required": false, "schema": {"title": "Date From", "type": "string", "description": "The start date to delete the files. If not specified, all files will be deleted.", "format": "date-time"}, "name": "date_from", "in": "query"}, {"description": "The end date to delete the files. If not specified, all files will be deleted.", "required": false, "schema": {"title": "Date To", "type": "string", "description": "The end date to delete the files. If not specified, all files will be deleted.", "format": "date-time"}, "name": "date_to", "in": "query"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/files/{file_key}": {"post": {"tags": ["files"], "summary": "Upload a file.", "description": "Uploads a file to a file storage.\n\nThe file will be streamed to the selected file storage (core platform or extension).\n\nThis upload operation allows to attach file metadata by passing headers with the prefix 'x-amz-meta-'\nOnce the upload is finished, you can use the [update_file_metadata operation](#files/update_file_metadata)\nto add or update the metadata of the file.\n\nThe `file_key` allows to categorize the uploaded file under a virtual file structure managed by the core platform.\nThis allows to create a directory-like structure for files from different extensions and file-storage types.", "operationId": "upload_file", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/File"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_upload_file_projects__project_id__files__file_key___post"}}}}}, "delete": {"tags": ["files"], "summary": "Delete a file.", "description": "Deletes the specified file.\n\nIf the file storage supports versioning and no `version` is specified, all versions of the file will be deleted.\n\nThe parameter `keep_latest_version` is useful if you want to delete all older versions of a file.", "operationId": "delete_file", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}, {"description": "File version tag. If not specified, all versions of the file will be deleted.", "required": false, "schema": {"title": "Version", "type": "string", "description": "File version tag. If not specified, all versions of the file will be deleted."}, "name": "version", "in": "query"}, {"description": "Keep the latest version of the file.", "required": false, "schema": {"title": "Keep Latest Version", "type": "boolean", "description": "Keep the latest version of the file.", "default": false}, "name": "keep_latest_version", "in": "query"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["files"], "summary": "Update file metadata.", "description": "Updates the file metadata.\n\nThis will not change the actual content or the key of the file.\n\nThe update is applied on the existing metadata based on the JSON Merge Patch Standard ([RFC7396](https://tools.ietf.org/html/rfc7396)).\nThereby, only the specified properties will be updated.", "operationId": "update_file_metadata", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}, {"description": "File version tag. If not specified, the latest version will be used.", "required": false, "schema": {"title": "Version", "type": "string", "description": "File version tag. If not specified, the latest version will be used."}, "name": "version", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FileInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/File"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "Resource update failed.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/files/{file_key}:metadata": {"get": {"tags": ["files"], "summary": "Get file metadata.", "description": "Returns metadata about the specified file.", "operationId": "get_file_metadata", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}, {"description": "File version tag. If not specified, the latest version will be used.", "required": false, "schema": {"title": "Version", "type": "string", "description": "File version tag. If not specified, the latest version will be used."}, "name": "version", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/File"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/files/{file_key}:download": {"get": {"tags": ["files"], "summary": "Download a file.", "description": "Downloads the selected file.\n\nIf the file storage supports versioning and no `version` is specified, the latest version will be downloaded.", "operationId": "download_file", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}, {"description": "File version tag. If not specified, the latest version will be used.", "required": false, "schema": {"title": "Version", "type": "string", "description": "File version tag. If not specified, the latest version will be used."}, "name": "version", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/files/{file_key}/actions": {"get": {"tags": ["files"], "summary": "List file actions.", "description": "Lists all actions available for the specified file.\n\nThe returned action IDs should be used when calling the [execute_file_action](#files/execute_file_action) operation.\n\nThe action mechanism allows extensions to provide additional functionality on files. It works the following way:\n\n1. The user requests all available actions via the [list_file_actions](#files/list_file_actions) operation.\n2. The operation will be forwarded to all installed extensions that have implemented the [list_file_actions](#files/list_file_actions) operation.\n3. Extensions can run arbitrary code - e.g., request and check the file metadata for compatibility - and return a list of actions with self-defined action IDs.\n4. The user selects one of those actions and triggers the [execute_file_action](#files/execute_file_action) operation by providing the selected action- and extension-ID.\n5. The operation is forwarded to the selected extension, which can run arbitrary code to execute the selected action.\n6. The return value of the operation can be either a simple message  (shown to the user) or a redirect to another URL (e.g., to show a web UI).\n\nThe same action mechanism is also used for other resources (e.g., services, jobs).\nIt can support a very broad set of use-cases, for example: CSV Viewer, Tensorflow Model Deployment, ZIP Archive Explorer ...", "operationId": "list_file_actions", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}, {"description": "File version tag. If not specified, the latest version will be used.", "required": false, "schema": {"title": "Version", "type": "string", "description": "File version tag. If not specified, the latest version will be used."}, "name": "version", "in": "query"}, {"description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.", "required": false, "schema": {"title": "Extension ID", "pattern": "^(?!.*--)[a-z0-9\\-]{1,61}[a-z0-9]$", "type": "string", "description": "Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform."}, "name": "extension_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List File Actions", "type": "array", "items": {"$ref": "#/components/schemas/ResourceAction"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/files/{file_key}/actions/{action_id}": {"get": {"tags": ["files"], "summary": "Execute a file action.", "description": "Executes the selected action.\n\nThe actions need to be first requested from the [list_file_actions](#files/list_file_actions) operation.\nIf the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.\n\nThe action mechanism is further explained in the description of the [list_file_actions](#files/list_file_actions).", "operationId": "execute_file_action", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "A valid file key.", "required": true, "schema": {"title": "File Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "A valid file key."}, "example": "datasets/customer-table.csv", "name": "file_key", "in": "path"}, {"description": "The action ID from the file actions operation.", "required": true, "schema": {"title": "Action Id", "pattern": "^(?!.*--)[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$", "type": "string", "description": "The action ID from the file actions operation."}, "name": "action_id", "in": "path"}, {"description": "File version tag. If not specified, the latest version will be used.", "required": false, "schema": {"title": "Version", "type": "string", "description": "File version tag. If not specified, the latest version will be used."}, "name": "version", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "307": {"description": "Redirecting to another URL"}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/json/{collection_id}/{key}": {"get": {"tags": ["json"], "summary": "Get JSON document.", "description": "Returns a single JSON document.", "operationId": "get_json_document", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "ID of the collection.", "required": true, "schema": {"title": "Collection Id", "type": "string", "description": "ID of the collection."}, "name": "collection_id", "in": "path"}, {"description": "Key of the JSON document.", "required": true, "schema": {"title": "Key", "type": "string", "description": "Key of the JSON document."}, "name": "key", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JsonDocument"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "put": {"tags": ["json"], "summary": "Create JSON document.", "description": "Creates a JSON document. If a document already exists for the given key, the document will be overwritten.\n\nIf no collection exists in the project with the provided `collection_id`, a new collection will be created.", "operationId": "create_json_document", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "ID of the collection.", "required": true, "schema": {"title": "Collection Id", "type": "string", "description": "ID of the collection."}, "name": "collection_id", "in": "path"}, {"description": "Key of the JSON document.", "required": true, "schema": {"title": "Key", "type": "string", "description": "Key of the JSON document."}, "name": "key", "in": "path"}, {"description": "If `True`, the document will be updated/overwritten if it already exists.", "required": false, "schema": {"title": "Upsert", "type": "boolean", "description": "If `True`, the document will be updated/overwritten if it already exists.", "default": true}, "name": "upsert", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Json Document", "type": "object"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JsonDocument"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "The resource already exists.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["json"], "summary": "Delete JSON document.", "description": "Deletes a single JSON document.\n\nIf no other document exists in the project collection, the collection will be deleted.", "operationId": "delete_json_document", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "ID of the collection.", "required": true, "schema": {"title": "Collection Id", "type": "string", "description": "ID of the collection."}, "name": "collection_id", "in": "path"}, {"description": "Key of the JSON document.", "required": true, "schema": {"title": "Key", "type": "string", "description": "Key of the JSON document."}, "name": "key", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "patch": {"tags": ["json"], "summary": "Update a JSON document.", "description": "Updates a JSON document.\n\nThe update is applied on the existing document based on the JSON Merge Patch Standard [RFC7396](https://tools.ietf.org/html/rfc7396).", "operationId": "update_json_document", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "ID of the collection.", "required": true, "schema": {"title": "Collection Id", "type": "string", "description": "ID of the collection."}, "name": "collection_id", "in": "path"}, {"description": "Key of the JSON document.", "required": true, "schema": {"title": "Key", "type": "string", "description": "Key of the JSON document."}, "name": "key", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Json Document", "type": "object"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JsonDocument"}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "404": {"description": "A specified resource is not found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "409": {"description": "Resource update failed.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/json/{collection_id}": {"get": {"tags": ["json"], "summary": "List JSON documents.", "description": "Lists all JSON documents for the given project collection.\n\nIf extensions are registered for this operation and no extension is selected via the `extension_id` parameter, the results from all extensions will be included in the returned list.\n\nThe `filter` parameter allows to filter the result documents based on a JSONPath expression ([JSON Path Specification](https://goessner.net/articles/JsonPath/)). The filter is only applied to filter documents in the list. It is not usable to extract specific properties.\n\n# TODO: Add filter examples", "operationId": "list_json_documents", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "ID of the collection.", "required": true, "schema": {"title": "Collection Id", "type": "string", "description": "ID of the collection."}, "name": "collection_id", "in": "path"}, {"description": "JSON Path query used to filter the results.", "required": false, "schema": {"title": "Filter", "type": "string", "description": "JSON Path query used to filter the results."}, "name": "filter", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response List Json Documents", "type": "array", "items": {"$ref": "#/components/schemas/JsonDocument"}}}}}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}, "delete": {"tags": ["json"], "summary": "Delete a JSON collection.", "description": "Deletes all documents of a single JSON collection.", "operationId": "delete_json_collection", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}, {"description": "ID of the collection.", "required": true, "schema": {"title": "Collection Id", "type": "string", "description": "ID of the collection."}, "name": "collection_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}, "/projects/{project_id}/json": {"delete": {"tags": ["json"], "summary": "Delete all JSON collections.", "description": "Deletes all JSON collections for the given project.", "operationId": "delete_json_collections", "parameters": [{"description": "A valid project ID.", "required": true, "schema": {"title": "Project ID", "maxLength": 25, "minLength": 4, "type": "string", "description": "A valid project ID."}, "example": "image-search-engine", "name": "project_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Invalid authentication credentials.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "403": {"description": "The authorized user does not have sufficient permission.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}, "422": {"description": "Validation Error.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemDetails"}}}}}, "security": [{"APIKeyQuery": []}, {"APIKeyHeader": []}, {"OAuth2PasswordBearer": []}, {"APIKeyCookie": []}]}}}, "components": {"schemas": {"AccessLevel": {"title": "AccessLevel", "enum": ["read", "write", "admin"], "type": "string", "description": "An enumeration."}, "AccessToken": {"title": "AccessToken", "required": ["token", "token_type", "subject", "scopes"], "type": "object", "properties": {"token": {"title": "Token", "type": "string", "description": "API Token.", "example": "f4528e540a133dd53ba6809e74e16774ebe4777a"}, "token_type": {"allOf": [{"$ref": "#/components/schemas/TokenType"}], "description": "The type of the token.", "example": "api-token"}, "subject": {"title": "Subject", "type": "string", "description": "Identifies the principal that is the subject of the token. Usually refers to the user to which the token is issued to.", "example": "users/dklqmomr2c8dx9cpb202dsqku"}, "scopes": {"title": "Scopes", "type": "array", "items": {"type": "string"}, "description": "List of scopes associated with the token.", "example": ["projects#read"]}, "created_at": {"title": "Created At", "type": "string", "description": "Creation date of the token.", "format": "date-time"}, "expires_at": {"title": "Expires At", "type": "string", "description": "Date at which the token expires and, thereby, gets revoked.", "format": "date-time", "example": "2021-04-25T10:20:30.400+02:30"}}}, "AllowedImageInfo": {"title": "AllowedImageInfo", "required": ["image_name", "image_tags"], "type": "object", "properties": {"image_name": {"title": "Image Name", "type": "string", "description": "Name of the docker image to allow. Do not specify the image tag (the part after the colon)", "example": "my-docker-registry.com/my-image"}, "image_tags": {"title": "Image Tags", "type": "array", "items": {"type": "string"}, "description": "List of tags that are allowed for this image. Can be set to [\"*\"] to allow all tags.", "example": ["0.2.1", "0.3.0"]}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this image that does not need predefined structure.", "example": {"additional-metadata": "value"}}}}, "ApiToken": {"title": "ApiToken", "required": ["token", "token_type", "subject", "scopes"], "type": "object", "properties": {"token": {"title": "Token", "type": "string", "description": "API Token.", "example": "f4528e540a133dd53ba6809e74e16774ebe4777a"}, "token_type": {"allOf": [{"$ref": "#/components/schemas/TokenType"}], "description": "The type of the token.", "example": "api-token"}, "subject": {"title": "Subject", "type": "string", "description": "Identifies the principal that is the subject of the token. Usually refers to the user to which the token is issued to.", "example": "users/dklqmomr2c8dx9cpb202dsqku"}, "scopes": {"title": "Scopes", "type": "array", "items": {"type": "string"}, "description": "List of scopes associated with the token.", "example": ["projects#read"]}, "created_at": {"title": "Created At", "type": "string", "description": "Creation date of the token.", "format": "date-time"}, "expires_at": {"title": "Expires At", "type": "string", "description": "Date at which the token expires and, thereby, gets revoked.", "format": "date-time", "example": "2021-04-25T10:20:30.400+02:30"}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "Short description about the context and usage of the token.", "example": "Token used for accesing project resources on my local machine."}, "created_by": {"title": "Created By", "type": "string", "description": "ID of the user that created this token.", "example": "16fd2706-8baf-433b-82eb-8c7fada847da"}, "token_purpose": {"title": "Token Purpose", "type": "string", "description": "The purpose of the token.", "example": "login-token"}}}, "AuthorizedAccess": {"title": "AuthorizedAccess", "required": ["authorized_subject"], "type": "object", "properties": {"authorized_subject": {"title": "Authorized Subject", "type": "string"}, "resource_name": {"title": "Resource Name", "type": "string"}, "access_level": {"$ref": "#/components/schemas/AccessLevel"}, "access_token": {"$ref": "#/components/schemas/AccessToken"}}}, "Body_introspect_token": {"title": "Body_introspect_token", "required": ["token"], "type": "object", "properties": {"token": {"title": "Token", "type": "string", "description": "The token that should be instrospected."}, "token_type_hint": {"title": "Token Type Hint", "type": "string", "description": "A hint about the type of the token submitted for introspection (e.g. `access_token`, `id_token` and `refresh_token`)."}}}, "Body_login_user_session": {"title": "Body_login_user_session", "required": ["username", "password"], "type": "object", "properties": {"username": {"title": "Username", "type": "string", "description": "The user\u2019s username or email used for login."}, "password": {"title": "Password", "type": "string", "description": "The user\u2019s password."}}}, "Body_register_admin_user_system_admin_post": {"title": "Body_register_admin_user_system_admin_post", "required": ["password", "password_confirm"], "type": "object", "properties": {"password": {"title": "Password", "type": "string"}, "password_confirm": {"title": "Password Confirm", "type": "string"}}}, "Body_request_token": {"title": "Body_request_token", "required": ["grant_type"], "type": "object", "properties": {"grant_type": {"title": "Grant Type"}, "username": {"title": "Username"}, "password": {"title": "Password"}, "scope": {"title": "Scope"}, "client_id": {"title": "Client Id"}, "client_secret": {"title": "Client Secret"}, "code": {"title": "Code"}, "redirect_uri": {"title": "Redirect Uri"}, "refresh_token": {"title": "Refresh Token"}, "state": {"title": "State"}, "set_as_cookie": {"title": "Set As Cookie", "default": false}}}, "Body_revoke_token": {"title": "Body_revoke_token", "required": ["token"], "type": "object", "properties": {"token": {"title": "Token", "type": "string", "description": "The token that should be revoked."}, "token_type_hint": {"title": "Token Type Hint", "type": "string", "description": "A hint about the type of the token submitted for revokation."}}}, "DeploymentCompute": {"title": "DeploymentCompute", "type": "object", "properties": {"min_cpus": {"title": "Min Cpus", "minimum": 0.0, "type": "number", "description": "Minimum number of CPU cores required by this deployment. The system will make sure that atleast this amount is available to the deployment.", "default": 1, "example": 2}, "max_cpus": {"title": "Max Cpus", "minimum": 0.0, "type": "number", "description": "Maximum number of CPU cores. Even so the system will try to provide the specified amount, it's only guaranteed that the deployment cannot use more. 0 means unlimited.", "example": 4}, "min_memory": {"title": "Min Memory", "minimum": 4.0, "type": "integer", "description": "Minimum amount of memory in Megabyte required by this deployment. The system will make sure that atleast this amount is available to the deployment.", "default": 1000, "example": 4000}, "max_memory": {"title": "Max Memory", "minimum": 0.0, "type": "integer", "description": "Maximum amount of memory in Megabyte. Even so the system will try to provide the specified amount, it's only guaranteed that the deployment cannot use more. 0 means unlimited.", "example": 8000}, "min_gpus": {"title": "Min Gpus", "minimum": 0.0, "type": "integer", "description": "Minimum number of GPUs required by this deployments. The system will make sure that atleast this amount is available to the deployment.", "example": 1}, "max_gpus": {"title": "Max Gpus", "minimum": 0.0, "type": "integer", "description": "Maximum number of GPUs. Even so the system will try to provide the specified amount, it's only guaranteed that the deployment cannot use more.", "example": 2}, "volume_path": {"title": "Volume Path", "type": "string", "description": "Container internal directory that should mount a volume for data persistence.", "example": "/path/to/data"}, "max_volume_size": {"title": "Max Volume Size", "minimum": 1.0, "type": "integer", "description": "Maximum volume size in Megabyte. This is only applied in combination with volume_path.", "example": 32000}, "max_container_size": {"title": "Max Container Size", "minimum": 1.0, "type": "integer", "description": "Maximum container size in Megabyte. The deployment will be killed if it grows above this limit.", "example": 32000}, "max_replicas": {"title": "Max Replicas", "minimum": 1.0, "type": "integer", "description": "Maximum number of deployment instances. The system will make sure to optimize the deployment based on the available resources and requests. Use 1 if the deployment is not scalable.", "default": 1, "example": 2}, "min_lifetime": {"title": "Min Lifetime", "type": "integer", "description": "Minimum guaranteed lifetime in seconds. Once the lifetime is reached, the system is allowed to kill the deployment in case it requires additional resources.", "default": 0, "example": 86400}}}, "DeploymentStatus": {"title": "DeploymentStatus", "enum": ["pending", "running", "succeeded", "failed", "terminating", "stopped", "unknown"], "type": "string", "description": "An enumeration."}, "DeploymentType": {"title": "DeploymentType", "enum": ["core-backend", "service", "job", "extension", "unknown"], "type": "string", "description": "An enumeration."}, "Extension": {"title": "Extension", "required": ["container_image"], "type": "object", "properties": {"capabilities": {"title": "Capabilities", "type": "array", "items": {"type": "string"}, "description": "List of capabilities implemented by this extension."}, "api_extension_endpoint": {"title": "Api Extension Endpoint", "type": "string", "description": "The endpoint base URL that implements the API operation stated in the capabilities property.", "example": "8080/extension/api"}, "ui_extension_endpoint": {"title": "Ui Extension Endpoint", "type": "string", "description": "The endpoint instruction that provide a Web UI. If this is provided, the extension will be integrated into the UI.", "example": "8080/webapp/ui"}, "extension_type": {"allOf": [{"$ref": "#/components/schemas/ExtensionType"}], "description": "The type of the extension.", "example": "project-extension"}, "container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters (environment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "id": {"title": "Id", "type": "string", "description": "Resource ID. Identifies a resource in a given context and time, for example, in combination with its type. Used in API operations and/or configuration files.", "default": "default-id", "example": "ac9ldprwdi68oihk34jli3kdp"}, "created_at": {"title": "Created At", "type": "string", "description": "Timestamp of the resource creation. Assigned by the server and read-only.", "format": "date-time"}, "created_by": {"title": "Created By", "type": "string", "description": "Resource name of the entity responsible for the creation of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "updated_at": {"title": "Updated At", "type": "string", "description": "Timestamp of the last resource modification. Is updated when create/patch/delete operation is performed. Assigned by the server and read-only.", "format": "date-time"}, "updated_by": {"title": "Updated By", "type": "string", "description": "Resource name of the entity responsible for the last modification of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "started_at": {"title": "Started At", "type": "string", "description": "Timestamp when the deployment was started.", "format": "date-time"}, "stopped_at": {"title": "Stopped At", "type": "string", "description": "Timestamp when the container has stopped.", "format": "date-time"}, "extension_id": {"title": "Extension Id", "type": "string", "description": "The extension ID in case the deployment is deployed via an extension."}, "deployment_type": {"allOf": [{"$ref": "#/components/schemas/DeploymentType"}], "description": "The type of this deployment.", "default": "unknown"}, "status": {"allOf": [{"$ref": "#/components/schemas/DeploymentStatus"}], "description": "The status of this deployment.", "default": "unknown", "example": "running"}, "internal_id": {"title": "Internal Id", "type": "string", "description": "The ID of the deployment on the orchestration platform.", "example": "73d247087fea5bfb3a67e98da6a07f5bf4e2a90e5b52f3c12875a35600818376"}, "graphql_endpoint": {"title": "Graphql Endpoint", "type": "string", "description": "GraphQL endpoint.", "example": "8080/graphql"}, "openapi_endpoint": {"title": "Openapi Endpoint", "type": "string", "description": "Endpoint that prorvides an OpenAPI schema definition..", "example": "8080/openapi.yaml"}, "health_endpoint": {"title": "Health Endpoint", "type": "string", "description": "The endpoint instruction that can be used for checking the deployment health.", "example": "8080/healthz"}, "idle_timeout": {"title": "Idle Timeout", "type": "number", "description": "Time after which the service is considered idling and will be stopped during the next idle check.If set to None, the service will never be considered idling.Can be specified as seconds or ISO 8601 time delta.", "format": "time-delta"}, "clear_volume_on_stop": {"title": "Clear Volume On Stop", "type": "boolean", "description": "If set to true, any volume attached to the service be deleted when the service is stopped.This means all persisted data will be cleared on service stop.", "default": false}, "last_access_time": {"title": "Last Access Time", "type": "string", "description": "Timestamp of the last time the service was accessed.", "format": "date-time"}, "last_access_user": {"title": "Last Access User", "type": "string", "description": "Id of the user that last accessed the service."}}}, "ExtensionInput": {"title": "ExtensionInput", "required": ["container_image"], "type": "object", "properties": {"capabilities": {"title": "Capabilities", "type": "array", "items": {"type": "string"}, "description": "List of capabilities implemented by this extension."}, "api_extension_endpoint": {"title": "Api Extension Endpoint", "type": "string", "description": "The endpoint base URL that implements the API operation stated in the capabilities property.", "example": "8080/extension/api"}, "ui_extension_endpoint": {"title": "Ui Extension Endpoint", "type": "string", "description": "The endpoint instruction that provide a Web UI. If this is provided, the extension will be integrated into the UI.", "example": "8080/webapp/ui"}, "extension_type": {"allOf": [{"$ref": "#/components/schemas/ExtensionType"}], "description": "The type of the extension.", "example": "project-extension"}, "container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters (environment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "graphql_endpoint": {"title": "Graphql Endpoint", "type": "string", "description": "GraphQL endpoint.", "example": "8080/graphql"}, "openapi_endpoint": {"title": "Openapi Endpoint", "type": "string", "description": "Endpoint that prorvides an OpenAPI schema definition..", "example": "8080/openapi.yaml"}, "health_endpoint": {"title": "Health Endpoint", "type": "string", "description": "The endpoint instruction that can be used for checking the deployment health.", "example": "8080/healthz"}, "idle_timeout": {"title": "Idle Timeout", "type": "number", "description": "Time after which the service is considered idling and will be stopped during the next idle check.If set to None, the service will never be considered idling.Can be specified as seconds or ISO 8601 time delta.", "format": "time-delta"}, "clear_volume_on_stop": {"title": "Clear Volume On Stop", "type": "boolean", "description": "If set to true, any volume attached to the service be deleted when the service is stopped.This means all persisted data will be cleared on service stop.", "default": false}, "is_stopped": {"title": "Is Stopped", "type": "boolean", "description": "If set to true, the service will be created in the DB but not started. The service status will be 'stopped'.", "default": false}}}, "ExtensionType": {"title": "ExtensionType", "enum": ["user-extension", "project-extension"], "type": "string", "description": "An enumeration."}, "File": {"title": "File", "required": ["key", "version", "latest_version"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "description": "Resource ID. Identifies a resource in a given context and time, for example, in combination with its type. Used in API operations and/or configuration files.", "default": "default-id", "example": "ac9ldprwdi68oihk34jli3kdp"}, "created_at": {"title": "Created At", "type": "string", "description": "Timestamp of the resource creation. Assigned by the server and read-only.", "format": "date-time"}, "created_by": {"title": "Created By", "type": "string", "description": "Resource name of the entity responsible for the creation of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "updated_at": {"title": "Updated At", "type": "string", "description": "Timestamp of the last resource modification. Is updated when create/patch/delete operation is performed. Assigned by the server and read-only.", "format": "date-time"}, "updated_by": {"title": "Updated By", "type": "string", "description": "Resource name of the entity responsible for the last modification of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "key": {"title": "Key", "maxLength": 1024, "minLength": 1, "pattern": "^(?!.*(\\r|\\n|\\.\\.)).{1,1024}$", "type": "string", "description": "The (virtual) path of the file. This path might not correspond to the actual path on the file storage.", "example": "datasets/customer-table.csv"}, "content_type": {"title": "Content Type", "type": "string", "description": "A standard MIME type describing the format of the contents. If an file is stored without a Content-Type, it is served as application/octet-stream.", "default": "", "example": "text/csv"}, "external_id": {"title": "External Id", "type": "string", "description": "The ID (or access instruction) of the file on the file storage provider.", "example": "datasets/customer-table.csv"}, "file_extension": {"title": "File Extension", "type": "string", "description": "The full file extension extracted from the key field. May contain multiple concatenated extensions, such as `tar.gz`.", "default": "", "example": "csv"}, "file_size": {"title": "File Size", "type": "integer", "description": "The file size in bytes.", "default": 0, "example": 1073741824}, "version": {"title": "Version", "type": "string", "description": "Version tag of this file. The version order might not be inferable from the version tag.", "example": "1614204512210009"}, "available_versions": {"title": "Available Versions", "type": "array", "items": {"type": "string"}, "description": "All version tags available for the given file.", "default": [], "example": ["1614204512210009", "23424512210009", "6144204512210009"]}, "latest_version": {"title": "Latest Version", "type": "boolean", "description": "Indicates if this is the latest available version of the file.", "example": true}, "md5_hash": {"title": "Md5 Hash", "type": "string", "description": "The base64-encoded 128-bit MD5 digest of the file. This can be used for checking the file integrity.", "example": "2a53375ff139d9837e93a38a279d63e5"}, "etag": {"title": "Etag", "type": "string", "description": "The etag of the file (mainly used by S3 storage). An entity-tag is an opaque validator for differentiating between multiple representations of the same resource", "example": "57f456164b0e5f365aaf9bb549731f32-95"}, "extension_id": {"title": "Extension Id", "type": "string", "description": "The extension ID in case the file is provided via an extension."}}}, "FileInput": {"title": "FileInput", "type": "object", "properties": {"display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}}}, "Job": {"title": "Job", "required": ["container_image"], "type": "object", "properties": {"container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters (environment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "id": {"title": "Id", "type": "string", "description": "Resource ID. Identifies a resource in a given context and time, for example, in combination with its type. Used in API operations and/or configuration files.", "default": "default-id", "example": "ac9ldprwdi68oihk34jli3kdp"}, "created_at": {"title": "Created At", "type": "string", "description": "Timestamp of the resource creation. Assigned by the server and read-only.", "format": "date-time"}, "created_by": {"title": "Created By", "type": "string", "description": "Resource name of the entity responsible for the creation of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "updated_at": {"title": "Updated At", "type": "string", "description": "Timestamp of the last resource modification. Is updated when create/patch/delete operation is performed. Assigned by the server and read-only.", "format": "date-time"}, "updated_by": {"title": "Updated By", "type": "string", "description": "Resource name of the entity responsible for the last modification of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "started_at": {"title": "Started At", "type": "string", "description": "Timestamp when the deployment was started.", "format": "date-time"}, "stopped_at": {"title": "Stopped At", "type": "string", "description": "Timestamp when the container has stopped.", "format": "date-time"}, "extension_id": {"title": "Extension Id", "type": "string", "description": "The extension ID in case the deployment is deployed via an extension."}, "deployment_type": {"allOf": [{"$ref": "#/components/schemas/DeploymentType"}], "description": "The type of this deployment.", "default": "unknown"}, "status": {"allOf": [{"$ref": "#/components/schemas/DeploymentStatus"}], "description": "The status of this deployment.", "default": "unknown", "example": "running"}, "internal_id": {"title": "Internal Id", "type": "string", "description": "The ID of the deployment on the orchestration platform.", "example": "73d247087fea5bfb3a67e98da6a07f5bf4e2a90e5b52f3c12875a35600818376"}}}, "JobInput": {"title": "JobInput", "required": ["container_image"], "type": "object", "properties": {"container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters (environment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}}}, "JsonDocument": {"title": "JsonDocument", "required": ["key", "json_value"], "type": "object", "properties": {"key": {"title": "Key", "type": "string", "description": "Unique key of the document.", "example": "my-json-document"}, "json_value": {"title": "Json Value", "type": "string", "description": "JSON value of the document.", "example": "{'foo': 'bar'}"}, "created_at": {"title": "Created At", "type": "string", "description": "Creation date of the document.", "format": "date-time", "example": "2021-04-23T10:20:30.400+02:30"}, "created_by": {"title": "Created By", "type": "string", "description": "ID of the user that created this document.", "example": "16fd2706-8baf-433b-82eb-8c7fada847da"}, "updated_at": {"title": "Updated At", "type": "string", "description": "Last date at which the document was updated.", "format": "date-time", "example": "2021-04-23T10:20:30.400+02:30"}, "updated_by": {"title": "Updated By", "type": "string", "description": "ID of the user that has last updated this document.", "example": "16fd2706-8baf-433b-82eb-8c7fada847da"}}}, "OAuth2ErrorDetails": {"title": "OAuth2ErrorDetails", "required": ["error"], "type": "object", "properties": {"error": {"title": "Error", "type": "string"}}}, "OAuthToken": {"title": "OAuthToken", "required": ["token_type", "access_token"], "type": "object", "properties": {"token_type": {"title": "Token Type", "type": "string", "description": "The type of token this is, typically just the string `bearer`"}, "access_token": {"title": "Access Token", "type": "string", "description": "The access token string."}, "expires_in": {"title": "Expires In", "type": "integer", "description": "The expiration time of the access token in seconds."}, "refresh_token": {"title": "Refresh Token", "type": "string", "description": "API token to refresh the sesion token (if it expires)."}, "scope": {"title": "Scope", "type": "string", "description": "The scopes contained in the access token."}, "id_token": {"title": "Id Token", "type": "string", "description": "OpenID Connect ID Token that encodes the user\u2019s authentication information."}}}, "OAuthTokenIntrospection": {"title": "OAuthTokenIntrospection", "required": ["active"], "type": "object", "properties": {"active": {"title": "Active", "type": "boolean", "description": "Indicator of whether or not the presented token is currently active."}, "scope": {"title": "Scope", "type": "string", "description": "A space-delimited list of scopes."}, "client_id": {"title": "Client Id", "type": "string", "description": "Client identifier for the OAuth 2.0 client that requested this token."}, "username": {"title": "Username", "type": "string", "description": "Human-readable identifier for the resource owner who authorized this token."}, "token_type": {"title": "Token Type", "type": "string", "description": "Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749]."}, "exp": {"title": "Exp", "type": "integer", "description": "Timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire, as defined in JWT [RFC7519]."}, "iat": {"title": "Iat", "type": "integer", "description": "Timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued, as defined in JWT [RFC7519]."}, "nbf": {"title": "Nbf", "type": "integer", "description": "Timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before, as defined in JWT [RFC7519]."}, "sub": {"title": "Sub", "type": "string", "description": "Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token."}, "aud": {"title": "Aud", "type": "string", "description": "Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519]."}, "iss": {"title": "Iss", "type": "string", "description": "String representing the issuer of this token, as defined in JWT [RFC7519]."}, "jti": {"title": "Jti", "type": "string", "description": "String identifier for the token, as defined in JWT [RFC7519]."}, "uid": {"title": "Uid", "type": "string", "description": "The user ID. This parameter is returned only if the token is an access token and the subject is an end user."}}}, "ProblemDetails": {"title": "ProblemDetails", "type": "object", "properties": {"code": {"title": "Code", "exclusiveMaximum": 600.0, "minimum": 100.0, "type": "integer", "description": "The HTTP status code generated by the origin server for this occurrence of the problem.", "example": 400}, "message": {"title": "Message", "type": "string", "description": "A developer-facing human-readable error message in English."}, "explanation": {"title": "Explanation", "type": "string", "description": "A human readable explanation specific to this error that is helpful to locate the problem and give advice on how to proceed."}, "details": {"title": "Details", "description": "A map of additional problem details."}}}, "Project": {"title": "Project", "type": "object", "properties": {"id": {"title": "Id", "type": "string", "description": "Resource ID. Identifies a resource in a given context and time, for example, in combination with its type. Used in API operations and/or configuration files.", "default": "default-id", "example": "ac9ldprwdi68oihk34jli3kdp"}, "created_at": {"title": "Created At", "type": "string", "description": "Timestamp of the resource creation. Assigned by the server and read-only.", "format": "date-time"}, "created_by": {"title": "Created By", "type": "string", "description": "Resource name of the entity responsible for the creation of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "updated_at": {"title": "Updated At", "type": "string", "description": "Timestamp of the last resource modification. Is updated when create/patch/delete operation is performed. Assigned by the server and read-only.", "format": "date-time"}, "updated_by": {"title": "Updated By", "type": "string", "description": "Resource name of the entity responsible for the last modification of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "technical_project": {"title": "Technical Project", "type": "boolean", "description": "Indicates that this is a technical project created by the system.", "default": false}}}, "ProjectCreation": {"title": "ProjectCreation", "required": ["id"], "type": "object", "properties": {"display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "id": {"title": "Id", "maxLength": 25, "minLength": 4, "type": "string", "description": "Project ID used for creating the project.", "example": "my-awesome-project"}}}, "ProjectInput": {"title": "ProjectInput", "type": "object", "properties": {"display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}}}, "ResourceAction": {"title": "ResourceAction", "required": ["action_id"], "type": "object", "properties": {"action_id": {"title": "Action Id", "pattern": "^(?!.*--)[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$", "type": "string", "description": "ID used to identify this action.", "example": "access-8080"}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "Display name of this action.", "example": "Access Port 8080"}, "icon": {"title": "Icon", "maxLength": 1000, "type": "string", "description": "Material Design Icon name or image URL used for displaying this action.", "example": "open_in_new"}, "extension_id": {"title": "Extension Id", "type": "string", "description": "The extension ID associated with this action."}, "extension_name": {"title": "Extension Name", "type": "string", "description": "The extension name associated with this action."}, "instructions": {"title": "Instructions", "type": "array", "items": {}, "description": "A list of instructions for the frontend application.", "example": ["new-tab"]}}}, "ResourceActionExecution": {"title": "ResourceActionExecution", "type": "object", "properties": {"parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters that are passed to the resource action.", "default": {}, "example": {"action-parameter": "parameter-value"}}}}, "Service": {"title": "Service", "required": ["container_image"], "type": "object", "properties": {"container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters (environment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "id": {"title": "Id", "type": "string", "description": "Resource ID. Identifies a resource in a given context and time, for example, in combination with its type. Used in API operations and/or configuration files.", "default": "default-id", "example": "ac9ldprwdi68oihk34jli3kdp"}, "created_at": {"title": "Created At", "type": "string", "description": "Timestamp of the resource creation. Assigned by the server and read-only.", "format": "date-time"}, "created_by": {"title": "Created By", "type": "string", "description": "Resource name of the entity responsible for the creation of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "updated_at": {"title": "Updated At", "type": "string", "description": "Timestamp of the last resource modification. Is updated when create/patch/delete operation is performed. Assigned by the server and read-only.", "format": "date-time"}, "updated_by": {"title": "Updated By", "type": "string", "description": "Resource name of the entity responsible for the last modification of this resource. Assigned by the server and read-only.", "example": "resources/ac9ldprwdi68oihk34jli3kdp"}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "started_at": {"title": "Started At", "type": "string", "description": "Timestamp when the deployment was started.", "format": "date-time"}, "stopped_at": {"title": "Stopped At", "type": "string", "description": "Timestamp when the container has stopped.", "format": "date-time"}, "extension_id": {"title": "Extension Id", "type": "string", "description": "The extension ID in case the deployment is deployed via an extension."}, "deployment_type": {"allOf": [{"$ref": "#/components/schemas/DeploymentType"}], "description": "The type of this deployment.", "default": "unknown"}, "status": {"allOf": [{"$ref": "#/components/schemas/DeploymentStatus"}], "description": "The status of this deployment.", "default": "unknown", "example": "running"}, "internal_id": {"title": "Internal Id", "type": "string", "description": "The ID of the deployment on the orchestration platform.", "example": "73d247087fea5bfb3a67e98da6a07f5bf4e2a90e5b52f3c12875a35600818376"}, "graphql_endpoint": {"title": "Graphql Endpoint", "type": "string", "description": "GraphQL endpoint.", "example": "8080/graphql"}, "openapi_endpoint": {"title": "Openapi Endpoint", "type": "string", "description": "Endpoint that prorvides an OpenAPI schema definition..", "example": "8080/openapi.yaml"}, "health_endpoint": {"title": "Health Endpoint", "type": "string", "description": "The endpoint instruction that can be used for checking the deployment health.", "example": "8080/healthz"}, "idle_timeout": {"title": "Idle Timeout", "type": "number", "description": "Time after which the service is considered idling and will be stopped during the next idle check.If set to None, the service will never be considered idling.Can be specified as seconds or ISO 8601 time delta.", "format": "time-delta"}, "clear_volume_on_stop": {"title": "Clear Volume On Stop", "type": "boolean", "description": "If set to true, any volume attached to the service be deleted when the service is stopped.This means all persisted data will be cleared on service stop.", "default": false}, "last_access_time": {"title": "Last Access Time", "type": "string", "description": "Timestamp of the last time the service was accessed.", "format": "date-time"}, "last_access_user": {"title": "Last Access User", "type": "string", "description": "Id of the user that last accessed the service."}}}, "ServiceInput": {"title": "ServiceInput", "required": ["container_image"], "type": "object", "properties": {"container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parameters (environment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "graphql_endpoint": {"title": "Graphql Endpoint", "type": "string", "description": "GraphQL endpoint.", "example": "8080/graphql"}, "openapi_endpoint": {"title": "Openapi Endpoint", "type": "string", "description": "Endpoint that prorvides an OpenAPI schema definition..", "example": "8080/openapi.yaml"}, "health_endpoint": {"title": "Health Endpoint", "type": "string", "description": "The endpoint instruction that can be used for checking the deployment health.", "example": "8080/healthz"}, "idle_timeout": {"title": "Idle Timeout", "type": "number", "description": "Time after which the service is considered idling and will be stopped during the next idle check.If set to None, the service will never be considered idling.Can be specified as seconds or ISO 8601 time delta.", "format": "time-delta"}, "clear_volume_on_stop": {"title": "Clear Volume On Stop", "type": "boolean", "description": "If set to true, any volume attached to the service be deleted when the service is stopped.This means all persisted data will be cleared on service stop.", "default": false}, "is_stopped": {"title": "Is Stopped", "type": "boolean", "description": "If set to true, the service will be created in the DB but not started. The service status will be 'stopped'.", "default": false}}}, "ServiceUpdate": {"title": "ServiceUpdate", "type": "object", "properties": {"container_image": {"title": "Container Image", "maxLength": 2000, "type": "string", "description": "The container image used for this deployment.", "default": "", "example": "hello-world:latest"}, "parameters": {"title": "Parameters", "type": "object", "additionalProperties": {"type": "string"}, "description": "Parmeters (enviornment variables) for this deployment.", "default": {}, "example": {"TEST_PARAM": "param-value"}}, "compute": {"title": "Compute", "allOf": [{"$ref": "#/components/schemas/DeploymentCompute"}], "description": "Compute instructions and limitations for this deployment.", "default": {"min_cpus": 1, "min_memory": 1000, "max_replicas": 1, "min_lifetime": 0}}, "command": {"title": "Command", "type": "array", "items": {"type": "string"}, "description": "Command to run within the deployment. This overwrites the existing docker ENTRYPOINT."}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "description": "Arguments to the command/entrypoint. This overwrites the existing docker CMD."}, "requirements": {"title": "Requirements", "type": "array", "items": {"type": "string"}, "description": "Additional requirements for deployment.", "default": []}, "endpoints": {"title": "Endpoints", "type": "array", "items": {"type": "string"}, "description": "A list of HTTP endpoints that can be accessed. This should always have an internal port and can include additional instructions, such as the URL path.", "default": [], "example": ["8080", "9001/webapp/ui", "9002b"]}, "display_name": {"title": "Display Name", "maxLength": 128, "minLength": 4, "type": "string", "description": "A user-defined human-readable name of the resource. The name can be up to 128 characters long and can consist of any UTF-8 character."}, "description": {"title": "Description", "maxLength": 240, "type": "string", "description": "A user-defined short description about the resource. Can consist of any UTF-8 character.", "default": ""}, "icon": {"title": "Icon", "type": "string", "description": "Identifier or image URL used for displaying this resource."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "A collection of arbitrary key-value pairs associated with this resource that does not need predefined structure. Enable third-party integrations to decorate objects with additional metadata for their own use.", "default": {}, "example": {"additional-metadata": "value"}}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Allows to disable a resource without requiring deletion. A disabled resource is not shown and not accessible.", "default": false}, "graphql_endpoint": {"title": "Graphql Endpoint", "type": "string", "description": "GraphQL endpoint.", "example": "8080/graphql"}, "openapi_endpoint": {"title": "Openapi Endpoint", "type": "string", "description": "Endpoint that prorvides an OpenAPI schema definition..", "example": "8080/openapi.yaml"}, "health_endpoint": {"title": "Health Endpoint", "type": "string", "description": "The endpoint instruction that can be used for checking the deployment health.", "example": "8080/healthz"}, "idle_timeout": {"title": "Idle Timeout", "type": "number", "description": "Time after which the service is considered idling and will be stopped during the next idle check.If set to None, the service will never be considered idling.Can be specified as seconds or ISO 8601 time delta.", "format": "time-delta"}, "clear_volume_on_stop": {"title": "Clear Volume On Stop", "type": "boolean", "description": "If set to true, any volume attached to the service be deleted when the service is stopped.This means all persisted data will be cleared on service stop.", "default": false}, "is_stopped": {"title": "Is Stopped", "type": "boolean", "description": "If set to true, the service will be created in the DB but not started. The service status will be 'stopped'.", "default": false}}}, "SystemInfo": {"title": "SystemInfo", "required": ["version", "namespace", "system_state"], "type": "object", "properties": {"version": {"title": "Version", "type": "string", "description": "Platform version.", "example": "0.1.0"}, "namespace": {"title": "Namespace", "type": "string", "description": "Namespace of this system.", "example": "mlhub"}, "system_state": {"allOf": [{"$ref": "#/components/schemas/SystemState"}], "description": "The state of the system."}, "metadata": {"title": "Metadata", "type": "object", "additionalProperties": {"type": "string"}, "description": "Additional key-value metadata associated with this system.", "example": {"additional-metadata": "value"}}}}, "SystemState": {"title": "SystemState", "enum": ["uninitialized", "running"], "type": "string", "description": "An enumeration."}, "SystemStatistics": {"title": "SystemStatistics", "required": ["project_count", "user_count", "job_count", "service_count", "file_count"], "type": "object", "properties": {"project_count": {"title": "Project Count", "type": "integer"}, "user_count": {"title": "User Count", "type": "integer"}, "job_count": {"title": "Job Count", "type": "integer"}, "service_count": {"title": "Service Count", "type": "integer"}, "file_count": {"title": "File Count", "type": "integer"}}}, "TokenType": {"title": "TokenType", "enum": ["session-token", "api-token"], "type": "string", "description": "An enumeration."}, "User": {"title": "User", "required": ["id"], "type": "object", "properties": {"username": {"title": "Username", "type": "string", "description": "A unique username on the system.", "example": "john-doe"}, "email": {"title": "Email", "type": "string", "description": "User email address.", "format": "email", "example": "john.doe@example.com"}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Indicates that user is disabled. Disabling a user will prevent any access to user-accessible resources.", "default": false}, "id": {"title": "Id", "type": "string", "description": "Unique ID of the user.", "example": "16fd2706-8baf-433b-82eb-8c7fada847da"}, "technical_user": {"title": "Technical User", "type": "boolean", "description": "Indicates if the user is a technical user created by the system.", "default": false}, "created_at": {"title": "Created At", "type": "string", "description": "Timestamp of the user creation. Assigned by the server and read-only.", "format": "date-time"}, "last_activity": {"title": "Last Activity", "type": "string", "description": "Last time the user accessed the system. Right now this is only updated when the user calls the /users/me endpoint so that call should always be done when the user loads the UI.", "format": "date-time"}, "has_password": {"title": "Has Password", "type": "boolean", "description": "Indicates if the user log in with password or SSO", "default": true}}}, "UserInput": {"title": "UserInput", "type": "object", "properties": {"username": {"title": "Username", "type": "string", "description": "A unique username on the system.", "example": "john-doe"}, "email": {"title": "Email", "type": "string", "description": "User email address.", "format": "email", "example": "john.doe@example.com"}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Indicates that user is disabled. Disabling a user will prevent any access to user-accessible resources.", "default": false}}}, "UserPermission": {"title": "UserPermission", "required": ["id"], "type": "object", "properties": {"username": {"title": "Username", "type": "string", "description": "A unique username on the system.", "example": "john-doe"}, "email": {"title": "Email", "type": "string", "description": "User email address.", "format": "email", "example": "john.doe@example.com"}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Indicates that user is disabled. Disabling a user will prevent any access to user-accessible resources.", "default": false}, "id": {"title": "Id", "type": "string", "description": "Unique ID of the user.", "example": "16fd2706-8baf-433b-82eb-8c7fada847da"}, "permission": {"allOf": [{"$ref": "#/components/schemas/AccessLevel"}], "description": "Permissions of the user for the particular project", "example": "READ"}}}, "UserRead": {"title": "UserRead", "required": ["id"], "type": "object", "properties": {"username": {"title": "Username", "type": "string", "description": "A unique username on the system.", "example": "john-doe"}, "email": {"title": "Email", "type": "string", "description": "User email address.", "format": "email", "example": "john.doe@example.com"}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Indicates that user is disabled. Disabling a user will prevent any access to user-accessible resources.", "default": false}, "id": {"title": "Id", "type": "string", "description": "Unique ID of the user.", "example": "16fd2706-8baf-433b-82eb-8c7fada847da"}}}, "UserRegistration": {"title": "UserRegistration", "type": "object", "properties": {"username": {"title": "Username", "type": "string", "description": "A unique username on the system.", "example": "john-doe"}, "email": {"title": "Email", "type": "string", "description": "User email address.", "format": "email", "example": "john.doe@example.com"}, "disabled": {"title": "Disabled", "type": "boolean", "description": "Indicates that user is disabled. Disabling a user will prevent any access to user-accessible resources.", "default": false}, "password": {"title": "Password", "type": "string", "description": "Password for the user. The password will be stored in as a hash."}}}, "Body_upload_file_projects__project_id__files__file_key___post": {"title": "Body_upload_file_projects__project_id__files__file_key___post", "required": ["file"], "type": "object", "properties": {"file": {"title": "File", "type": "string", "format": "binary"}}}}, "securitySchemes": {"APIKeyQuery": {"type": "apiKey", "in": "query", "name": "ct_token"}, "APIKeyHeader": {"type": "apiKey", "in": "header", "name": "ct_token"}, "OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "auth/oauth/token"}}}, "APIKeyCookie": {"type": "apiKey", "in": "cookie", "name": "ct_token"}}}}